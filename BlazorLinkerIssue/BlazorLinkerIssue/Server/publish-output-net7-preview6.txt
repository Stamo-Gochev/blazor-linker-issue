MSBuild version 17.3.0-preview-22329-01+77c72dd0f for .NET
  Determining projects to restore...
  All projects are up-to-date for restore.
C:\Program Files\dotnet\sdk\7.0.100-preview.6.22352.1\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets(219,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [D:\...\blazor-linker-issue\BlazorLinkerIssue\BlazorLinkerIssue\Server\BlazorLinkerIssue.Server.csproj]
C:\Program Files\dotnet\sdk\7.0.100-preview.6.22352.1\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets(219,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [D:\...\blazor-linker-issue\BlazorLinkerIssue\CustomComponents\CustomComponents.csproj]
C:\Program Files\dotnet\sdk\7.0.100-preview.6.22352.1\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets(219,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [D:\...\blazor-linker-issue\BlazorLinkerIssue\BlazorLinkerIssue\Shared\BlazorLinkerIssue.Shared.csproj]
  CustomComponents -> D:\...\blazor-linker-issue\BlazorLinkerIssue\CustomComponents\bin\Release\net7.0\CustomComponents.dll
  BlazorLinkerIssue.Shared -> D:\...\blazor-linker-issue\BlazorLinkerIssue\BlazorLinkerIssue\Shared\bin\Release\net7.0\BlazorLinkerIssue.Shared.dll
  BlazorLinkerIssue.Client -> D:\...\blazor-linker-issue\BlazorLinkerIssue\BlazorLinkerIssue\Client\bin\Release\net7.0\BlazorLinkerIssue.Client.dll
  BlazorLinkerIssue.Client (Blazor output) -> D:\...\blazor-linker-issue\BlazorLinkerIssue\BlazorLinkerIssue\Client\bin\Release\net7.0\wwwroot
  BlazorLinkerIssue.Server -> D:\...\blazor-linker-issue\BlazorLinkerIssue\BlazorLinkerIssue\Server\bin\Release\net7.0\BlazorLinkerIssue.Server.dll
  Optimizing assemblies for size may change the behavior of the app. Be sure to test after publishing. See: https://aka.ms/dotnet-illink
  Optimizing assemblies for size. This process might take a while.
  Stack overflow.
     at Mono.Linker.Steps.MarkStep.MarkType(Mono.Cecil.TypeReference, Mono.Linker.DependencyInfo, System.Nullable`1<Mono.Linker.MessageOrigin>)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ShouldWarnForReflectionAccessToCompilerGeneratedCode(Mono.Cecil.MethodDefinition)
     at Mono.Linker.Steps.MarkStep.ProcessAnalysisAnnotationsForMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkIndirectlyCalledMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkMethodVisibleToReflection(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkMethod(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.MethodDefinition, Mono.Linker.DependencyKind)
     at Mono.Linker.Dataflow.ReflectionMarker.MarkTypeForDynamicallyAccessedMembers(Mono.Linker.MessageOrigin ByRef, Mono.Cecil.TypeDefinition, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes, Mono.Linker.DependencyKind, Boolean)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.MarkTypeForDynamicallyAccessedMembers(ILLink.Shared.TypeSystemProxy.TypeProxy ByRef, System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)
     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.RequireDynamicallyAccessedMembers(ILLink.Shared.TrimAnalysis.DiagnosticContext ByRef, ILLink.Shared.DataFlow.ValueSet`1<ILLink.Shared.DataFlow.SingleValue> ByRef, ILLink.Shared.TrimAnalysis.ValueWithDynamicallyAccessedMembers)
     at Mono.Linker.Dataflow.GenericArgumentDataFlow.ProcessGenericArgumentDataFlow(Mono.Cecil.GenericParameter, Mono.Cecil.TypeReference)
     at Mono.Linker.Steps.MarkStep.MarkGenericArguments(Mono.Cecil.IGenericInstance)
     at Mono.Linker.Steps.MarkStep.GetOriginalMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo)
     at Mono.Linker.Steps.MarkStep.MarkMethod(Mono.Cecil.MethodReference, Mono.Linker.DependencyInfo, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.MarkInstruction(Mono.Cecil.Cil.Instruction, Mono.Cecil.MethodDefinition, Boolean ByRef)
     at Mono.Linker.Steps.MarkStep.MarkAndCheckRequiresReflectionMethodBodyScanner(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.MarkMethodBody(Mono.Cecil.Cil.MethodBody)
     at Mono.Linker.Steps.MarkStep.ProcessMethod(Mono.Cecil.MethodDefinition, Mono.Linker.DependencyInfo ByRef, Mono.Linker.MessageOrigin ByRef)
     at Mono.Linker.Steps.MarkStep.ProcessQueue()
     at Mono.Linker.Steps.MarkStep.ProcessPrimaryQueue()
     at Mono.Linker.Steps.MarkStep.Process()
     at Mono.Linker.Steps.MarkStep.Process(Mono.Linker.LinkContext)
     at Mono.Linker.Pipeline.ProcessStep(Mono.Linker.LinkContext, Mono.Linker.Steps.IStep)
     at Mono.Linker.Pipeline.Process(Mono.Linker.LinkContext)
     at Mono.Linker.Driver.Run(Mono.Linker.ILogger)
     at Mono.Linker.Driver.Main(System.String[])
C:\Program Files\dotnet\sdk\7.0.100-preview.6.22352.1\Sdks\Microsoft.NET.ILLink.Tasks\build\Microsoft.NET.ILLink.targets(158,5): error MSB6006: "dotnet.exe" exited with code -1073741571. [D:\...\blazor-linker-issue\BlazorLinkerIssue\BlazorLinkerIssue\Client\BlazorLinkerIssue.Client.csproj]
C:\Program Files\dotnet\sdk\7.0.100-preview.6.22352.1\Sdks\Microsoft.NET.ILLink.Tasks\build\Microsoft.NET.ILLink.targets(111,5): error NETSDK1144: Optimizing assemblies for size failed. Optimization can be disabled by setting the PublishTrimmed property to false. [D:\...\blazor-linker-issue\BlazorLinkerIssue\BlazorLinkerIssue\Client\BlazorLinkerIssue.Client.csproj]
